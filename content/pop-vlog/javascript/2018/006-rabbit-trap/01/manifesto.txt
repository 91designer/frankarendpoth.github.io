Frank Poth 03/01/2018

TITLE

006 Rabbit Trap Part 1 Program Structure

THESIS

Separating components of a program into logical groups makes code more modular and maintainable.

SUPPORT

1. Maintenance - Properly separated components will not have internal references to other components and will only interact via their public methods. This allows one component to be modified internally without need to modify another component.

2. Modularity - Components that don't have internal references to other components can easily be used in other applications. A good example of this is a controller class that can be reused in different applications or exchanged for a different controller that takes a different kind of input, but has the same public methods.

SCRIPT

1. Intro

Hey, guys, my name is Frank and THIS is the Poth on Programming Video Log.

Today I'm starting a series on how to program a tile based platforming game called "Rabbit Trap". I'll be designing the game as I go, but it will eventually feature:

Tile Based Collision Detection and Response,
Scrolling Maps,
Loading Levels,
Sprite Animation,
and Interactive Game Objects.

In this first part of the series, I'll be talking about how to build a strong foundation for the game. The concepts I'm going to explain are strongly rooted in Object Oriented Programming and can be used in any program to improve organization and modularity. This might seem boring, but if you use this approach, it can save you hours of editing and frustration, and leave you more time to focus on fun stuff like level design and graphics. So be sure to watch this video.

2. Bullets

  a. Overview of Components
    a1. This is basically a Model/View/Controller approach.
    a2. The main file is where all the components come together and interact with each other
    a3. The Controller handles user input.
    a4. The Display handles the onscreen canvas and rendering
    a5. The Game handles game logic.
    a6. The Engine perpetuates the game loop using requestAnimationFrame.

  b. How it increases maintainability and modularity
    b1. Self contained classes are easy to move
    b2. No internal references to outside objects make it easy to edit
    b4. Individual files help organize


  c. Conclusion
    c1. Conclusion
    c2. A short look at the HTML

IN THIS VIDEO, I'm going to talk about the Model/View/Controller approach to organizing a program and how the different components of this example work together in the main JS file. Then I'm going to talk about how this structure increases maintainability and modularity. As always, feel free to use the comments section, and be sure to check out the links to the source code and working example in the video description; And if you learn something, give this video a like!
